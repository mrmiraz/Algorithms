/*
Given a set of integers, the task is to divide it into two sets S1 and S2 
such that the absolute difference between their sums is minimum. 

Note: only applicable for the positive element of set.

Algorithms(Tabular):
Step 1: Calculate sum of all element of the set
Step 2: Find all possible value(0->sum) can be generated by the subset of the set
Step 3: Find the min difference which can be generated by the subset of the set
        difference = sum-value-value
Step 4: Return the minimum value among those difference

Time Complexity: O(m*sum)

Sample input:
[1, 6, 11, 5]
Sample output:
1

*/
public class MinPartition {
    //recursion solution
    public static int backTrack(int[] arr, int n, int set1, int totalSum){
        if(n==0){
            return Math.abs((totalSum-set1)-set1);
        }
        return Math.min(backTrack(arr, n-1, set1+arr[n-1], totalSum), backTrack(arr, n-1, set1, totalSum));
    }
    
    //Tabular solution
    public static int minSumTabular(int[] arr, int size, int totalSum){
        boolean[][] dp = new boolean[size+1][totalSum+1];
        //any set can produce sum 0
        for(int i = 0; i <= size; i++){
            dp[i][0] = true;
        }
        
        for(int i = 1; i <= size; i++){
            for(int j = 1; j <= totalSum; j++){
                // when element are ignored
                dp[i][j] = dp[i-1][j];
                if(arr[i-1] <= j){
                    //when element is taking
                    dp[i][j] = dp[i][j] || dp[i-1][j-arr[i-1]];
                }
            }
        }
        
        int minSum = Integer.MAX_VALUE;
        //find minimum difference from last row when sum is possible(col = true)
        for(int j = totalSum/2; j >= 0;j--){
            if(dp[size][j]){
                minSum = Math.min(minSum, Math.abs(totalSum-j-j));
                break;
            }
        }
        return minSum;
    }
    
    public static int minSum(int[] arr, int size){
        int totalSum = 0;
        //calculate sum of all element
        for(int i = 0; i < size; i++){
            totalSum+= arr[i];
        }
//        return backTrack(arr, size, 0, totalSum);
        return minSumTabular(arr, size, totalSum);
    }
    
    public static void main(String[] args) {
        int arr[] = {1, 6, 11, 5};
        int n = arr.length;
        System.out.println(minSum(arr, n));
    }
}
